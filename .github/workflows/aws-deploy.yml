name: Build and Deploy Docker Image

# Trigger on push to main or manual trigger
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Create .env file with dynamic ENV value
    - name: Create .env file
      run: |
        cat > .env << EOF
        NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY }}
        AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        GNEWS_API_KEY=${{ secrets.GNEWS_API_KEY }}
        STABILITY_AI_API_KEY=${{ secrets.STABILITY_AI_API_KEY }}
        AIHORDE_API_KEY=${{ secrets.AIHORDE_API_KEY }}
        PROD_BOT_TOKEN=${{ secrets.PROD_BOT_TOKEN }}
        DEV_BOT_TOKEN=${{ secrets.DEV_BOT_TOKEN }}
        EOF

    # Set the date for tag with build number
    - name: Set date tag
      id: date
      run: echo "DATE_TAG=$(date +'%Y%m%d').${{ github.run_number }}" >> $GITHUB_ENV

    # Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:${{ env.DATE_TAG }}

    # Deploy to your server via SSH
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          # Login to Docker Hub
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # Pull the latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:${{ env.DATE_TAG }}
          
          # Stop and remove the old container
          docker stop container_name || true
          docker rm container_name || true
          
          # Run the new container with environment label
          docker run -d --name container_name \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_REPO_NAME }}:${{ env.DATE_TAG }}
          
          # Clean up unused images
          docker image prune -f
